Performing C SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD failed with the following output:
Change Dir: /home/hxw/exp/liboqs-hxw-batch/_build/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/ninja cmTC_e833a && [1/2] Building C object CMakeFiles/cmTC_e833a.dir/src.c.o
[2/2] Linking C executable cmTC_e833a
FAILED: cmTC_e833a 
: && /usr/bin/cc -DCMAKE_HAVE_LIBC_PTHREAD   CMakeFiles/cmTC_e833a.dir/src.c.o  -o cmTC_e833a   && :
/usr/bin/ld: CMakeFiles/cmTC_e833a.dir/src.c.o: in function `main':
src.c:(.text+0x46): undefined reference to `pthread_create'
/usr/bin/ld: src.c:(.text+0x52): undefined reference to `pthread_detach'
/usr/bin/ld: src.c:(.text+0x63): undefined reference to `pthread_join'
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.


Source file was:
#include <pthread.h>

void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Determining if the memset_s exist failed with the following output:
Change Dir: /home/hxw/exp/liboqs-hxw-batch/_build/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/ninja cmTC_b09ea && [1/2] Building C object CMakeFiles/cmTC_b09ea.dir/CheckSymbolExists.c.o
FAILED: CMakeFiles/cmTC_b09ea.dir/CheckSymbolExists.c.o 
/usr/bin/cc   -fPIE   -std=gnu11 -o CMakeFiles/cmTC_b09ea.dir/CheckSymbolExists.c.o   -c CheckSymbolExists.c
CheckSymbolExists.c: In function ‘main’:
CheckSymbolExists.c:8:19: error: ‘memset_s’ undeclared (first use in this function); did you mean ‘memset’?
    8 |   return ((int*)(&memset_s))[argc];
      |                   ^~~~~~~~
      |                   memset
CheckSymbolExists.c:8:19: note: each undeclared identifier is reported only once for each function it appears in
ninja: build stopped: subcommand failed.


File /home/hxw/exp/liboqs-hxw-batch/_build/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <string.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef memset_s
  return ((int*)(&memset_s))[argc];
#else
  (void)argc;
  return 0;
#endif
}
